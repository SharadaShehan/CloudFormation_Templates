AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ConfigBucket:
    Type: String
    Description: 'The name of the S3 bucket where the configuration files are stored'

Resources:
  FirstBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AWS::StackName}-upload-bucket"
      AccessControl: Private
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt ResizeImageLambdaFunction.Arn
  
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt ResizeImageLambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${FirstBucket}'
      
  SecondBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${AWS::StackName}-public-bucket"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

  PublicReadBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref SecondBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${SecondBucket}/*'

  ResizeImageLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-LambdaPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: 'arn:aws:s3:::*/*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Sub 'arn:aws:s3:::${SecondBucket}/*'

  ResizeImageLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      Role: !GetAtt ResizeImageLambdaExecutionRole.Arn
      FunctionName: !Sub "${AWS::StackName}-LambdaFunction"
      Layers:
        - !Ref LambdaLayerForFunction
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const S3 = new AWS.S3();
          const Jimp = require('jimp');

          exports.handler = async (event, context, callback) => {
            const bucket = event.Records[0].s3.bucket.name;
            const key = event.Records[0].s3.object.key;
            console.log('file uploaded', bucket, key);

            const params = {
              Bucket: bucket,
              Key: key
            };

            try {
              const s3Object = await S3.getObject(params).promise();
              const image = await Jimp.read(s3Object.Body);
              image.resize(200, 200);

              const resizedImageBuffer = await image.getBufferAsync(Jimp.MIME_PNG);

              await S3.putObject({
                Body: resizedImageBuffer,
                Bucket: process.env.SECOND_BUCKET_NAME,
                Key: key
              }).promise();

              callback(null, 'Image resized successfully');
              console.log('Image resized successfully');
            } catch (error) {
              console.error(error);
              callback(error);
            }
          };
      Timeout: 60
      Environment:
        Variables:
          SECOND_BUCKET_NAME: !Ref SecondBucket
      TracingConfig:
        Mode: Active

  LambdaLayerForFunction:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Description: "This layer contains libraries required to run the Lambda function"
      CompatibleRuntimes:
        - nodejs18.x
      Content:
        S3Bucket: !Ref ConfigBucket
        S3Key: 'lambda-layer.zip'
      LayerName: !Sub "${AWS::StackName}-LambdaLayer"
      LicenseInfo: 'MIT'
